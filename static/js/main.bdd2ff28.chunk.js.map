{"version":3,"sources":["API.ts","appSlice.ts","JokeListItem.tsx","JokeList.tsx","CategorySelector.tsx","SearchForm.tsx","NewJokeForm.tsx","App.tsx","store.ts","index.tsx"],"names":["postJoke","joke","a","axios","post","then","res","data","getJokes","search","category","get","getInfo","categories","initialState","undefined","info","newJoke","postJokeResponse","appSlice","createSlice","name","reducers","dataFetched","state","payload","infoDataFetched","categorySubmitted","searchTextUpdated","text","clearButtonClicked","jokePosted","postResponse","actions","JokeItemContainer","styled","div","Answer","Setup","Category","JokeListItem","type","TwoPartJoke","data-testid","setup","delivery","SingleJoke","JokeListContainer","JokeList","jokes","map","id","SelectorContainer","SelectorField","select","CategorySelector","value","onChange","style","fontSize","e","target","Form","form","TextInput","input","Button","button","Row","SearchForm","submit","onClick","useSelector","selectState","React","setCategory","handleChange","useCallback","throttled","useMemo","throttle","preventDefault","SetupInput","NewJokeForm","submitJoke","useState","jokeType","setJokeType","setJoke","setSetup","setDelivery","onSubmit","alert","formatVersion","flags","nsfw","religious","political","racist","sexist","explicit","lang","safe","debounced","debounce","marginBottom","required","document","title","Container","JokeSearchContainer","SubmitJokeContainer","App","dispatch","useDispatch","useEffect","infoData","console","log","getInfoData","jokesData","getJokesData","postNewJokeToAPI","safeJokesCount","safeJokes","reduce","accum","item","count","totalCount","length","marginTop","message","store","configureStore","reducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bdd2ff28.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Categories } from \"./appSlice\";\n\nexport type DataResponse = {\n  error: boolean;\n  amount: number;\n  jokes: Joke[];\n};\n\nexport type Joke = {\n  category: string;\n  delivery: string;\n  flags: {\n    explicit: boolean;\n    nsfw: boolean;\n    political: boolean;\n    racist: boolean;\n    religious: boolean;\n    sexist: boolean;\n  };\n  id: number;\n  joke: string;\n  lang: string;\n  safe: boolean;\n  type: \"single\" | \"twopart\";\n  setup: string;\n};\n\nexport type SafeJokesCount = {\n  lang: string;\n  count: number;\n};\n\ntype JokeStyleType = \"single\" | \"twopart\";\n\nexport type Info = {\n  error: boolean;\n  version: string;\n  jokes: {\n    totalCount: number;\n    categories: string[];\n    flags: string[];\n    types: JokeStyleType;\n    submissionURL: string;\n    idRange: {\n      cs: number[];\n      de: number[];\n      es: number[];\n      fr: number[];\n      en: number[];\n      pt: number[];\n    };\n    safeJokes: SafeJokesCount[];\n  };\n  formats: string[];\n  jokeLanguages: number;\n  systemLanguages: number;\n  info: string;\n  timestamp: Date;\n};\n\nexport type PostSingleJoke = {\n  formatVersion: number;\n  category: Categories;\n  type: \"single\";\n  joke: string;\n  flags: {\n    nsfw: boolean;\n    religious: boolean;\n    political: boolean;\n    racist: boolean;\n    sexist: boolean;\n    explicit: boolean;\n  };\n  lang: \"en\";\n  safe: true;\n};\n\nexport type PostTwoPartJoke = {\n  formatVersion: number;\n  category: Categories;\n  type: \"twopart\";\n  setup: string;\n  delivery: string;\n  flags: {\n    nsfw: boolean;\n    religious: boolean;\n    political: boolean;\n    racist: boolean;\n    sexist: boolean;\n    explicit: boolean;\n  };\n  lang: \"en\";\n  safe: true;\n};\n\nexport type PostJokeResponse = {\n  error: boolean;\n  message: string;\n  submission: PostSingleJoke | PostTwoPartJoke;\n  timestamp: number;\n};\n\nexport const postJoke = async (joke: PostSingleJoke | PostTwoPartJoke) => {\n  return axios\n    .post<PostJokeResponse>(\"https://v2.jokeapi.dev/submit\", joke)\n    .then((res) => res.data);\n};\n\nexport const getJokes = async (search: string, category: Categories) => {\n  const resultsAmount: number = 10;\n  return axios\n    .get<DataResponse>(\n      `https://v2.jokeapi.dev/joke/${category}?contains=${search}&amount=${resultsAmount}&safe-mode`\n    )\n    .then((res) => res.data);\n};\n\nexport const getInfo = async () => {\n  return axios.get<Info>(`https://v2.jokeapi.dev/info`).then((res) => res.data);\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DataResponse,\n  Info,\n  PostJokeResponse,\n  PostSingleJoke,\n  PostTwoPartJoke,\n} from \"./API\";\n\n// don't require \"Dark\" category as running API calls in safe mode\n// infering a string union from an array of strings\nexport const categories = [\n  \"Any\",\n  \"Misc\",\n  \"Programming\",\n  \"Pun\",\n  \"Spooky\",\n  \"Christmas\",\n] as const;\nexport type Categories = typeof categories[number];\n\n// create state structure type\nexport type AppState = {\n  data?: DataResponse;\n  info?: Info;\n  category: Categories;\n  search: string;\n  newJoke?: PostSingleJoke | PostTwoPartJoke;\n  postJokeResponse?: PostJokeResponse;\n};\n\n// initialise state structure\nconst initialState: AppState = {\n  data: undefined,\n  info: undefined,\n  category: \"Any\",\n  search: \"\",\n  newJoke: undefined,\n  postJokeResponse: undefined,\n};\n\nexport const appSlice = createSlice({\n  name: \"appSlice\",\n  initialState: initialState,\n  reducers: {\n    // reducer functions actions named as events rather than commands\n    dataFetched: (\n      state,\n      { payload }: PayloadAction<{ data: DataResponse }>\n    ) => {\n      state.data = payload.data;\n    },\n    infoDataFetched: (state, { payload }: PayloadAction<{ info: Info }>) => {\n      state.info = payload.info;\n    },\n    categorySubmitted: (\n      state,\n      { payload }: PayloadAction<{ category: Categories }>\n    ) => {\n      state.category = payload.category;\n    },\n    searchTextUpdated: (\n      state,\n      { payload }: PayloadAction<{ text: string }>\n    ) => {\n      state.search = payload.text;\n    },\n    clearButtonClicked: (state) => {\n      state.search = \"\";\n      state.category = \"Any\";\n    },\n    jokePosted: (\n      state,\n      { payload }: PayloadAction<{ postResponse: PostJokeResponse }>\n    ) => {\n      state.postJokeResponse = payload.postResponse;\n    },\n  },\n});\n\n// export the slice's reducer functions by destructurnng the reducers object\nexport const {\n  dataFetched,\n  infoDataFetched,\n  categorySubmitted,\n  searchTextUpdated,\n  clearButtonClicked,\n  jokePosted,\n} = appSlice.actions;\n\nexport default appSlice.reducer;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Joke } from \"./API\";\n\nconst JokeItemContainer = styled.div`\n  background: white;\n  border: 1px solid lightgrey;\n  color: black;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst Answer = styled.div`\n  font-style: italic;\n  margin-top: 1rem;\n`;\n\nconst Setup = styled.div``;\n\nconst Category = styled.div`\n  align-self: flex-end;\n  font-size: 12px;\n  border: 1px solid black;\n  border-radius: 0.25rem;\n  padding: 0.2rem;\n  margin-top: 1rem;\n`;\n\nexport const JokeListItem = ({ joke }: { joke: Joke }) => {\n  return (\n    <div>\n      {joke.type === \"single\" ? (\n        <SingleJoke joke={joke} />\n      ) : (\n        <TwoPartJoke joke={joke} />\n      )}\n    </div>\n  );\n};\n\n// Two seperate components to display the two styles of joke\nexport const TwoPartJoke = ({ joke }: { joke: Joke }) => {\n  return (\n    <JokeItemContainer data-testid={\"jokeListItem\"}>\n      <Setup>{joke.setup}</Setup>\n      <Answer> - {joke.delivery}</Answer>\n      <Category>{joke.category}</Category>\n    </JokeItemContainer>\n  );\n};\n\nexport const SingleJoke = ({ joke }: { joke: Joke }) => {\n  return (\n    <JokeItemContainer data-testid={\"jokeListItem\"}>\n      <Setup>{joke.joke}</Setup>\n      <Category>{joke.category}</Category>\n    </JokeItemContainer>\n  );\n};\n","import * as React from \"react\";\nimport { Joke } from \"./API\";\nimport { JokeListItem } from \"./JokeListItem\";\nimport styled from \"styled-components\";\n\nconst JokeListContainer = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  @media only screen and (max-device-width: 768px) {\n    width: 91%;\n    position: relative;\n  }\n`;\n\nexport const JokeList = ({ jokes }: { jokes?: Joke[] }) => {\n  return (\n    <JokeListContainer>\n      {jokes?.map((joke) => {\n        return <JokeListItem key={joke.id} joke={joke} />;\n      })}\n    </JokeListContainer>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Categories } from \"./appSlice\";\n\nconst SelectorContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SelectorField = styled.select`\n  width: 70%;\n  height: 40px;\n  font-family: \"Nunito\", sans-serif;\n  border: 1px solid lightgrey;\n  border-radius: 0.25rem;\n  transition: 0.4s;\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n  }\n`;\n\nexport const CategorySelector = ({\n  categories,\n  value,\n  onChange,\n}: {\n  categories: Readonly<Categories[]>;\n  value: Categories;\n  onChange: (category: Categories) => void;\n}) => {\n  return (\n    <SelectorContainer>\n      <label style={{ fontSize: \"13px\" }}>Category</label>\n      <SelectorField\n        value={value ?? categories}\n        onChange={(e) => onChange(e.target.value as any)}\n        data-testid={\"categorySelector\"}\n      >\n        {categories.map((category) => {\n          return (\n            <option key={category} value={category}>\n              {category}\n            </option>\n          );\n        })}\n      </SelectorField>\n    </SelectorContainer>\n  );\n};\n","import * as React from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { throttle } from \"throttle-debounce\";\nimport { AppState, Categories, categories } from \"./appSlice\";\nimport { CategorySelector } from \"./CategorySelector\";\n\nconst Form = styled.form`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst TextInput = styled.input`\n  height: 35px;\n  width: 68%;\n  font-family: \"Nunito\", sans-serif;\n  border: 1px solid lightgrey;\n  border-radius: 0.25rem;\n  transition: 0.4s;\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n  }\n  :focus {\n    outline: none;\n  }\n`;\n\nconst Button = styled.button`\n  font-size: 1rem;\n  font-family: \"Nunito\", sans-serif;\n  border: none;\n  border-radius: 0.5rem;\n  background: #1757a0;\n  width: 6rem;\n  height: 2rem;\n  text-decoration: none;\n  padding: 0.25rem;\n  color: white;\n  transition: 0.3s;\n  align-self: flex-end;\n  letter-spacing: 1px;\n  :hover {\n    background: #114177;\n  }\n`;\n\nconst Row = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const SearchForm = ({\n  submit,\n  onChange,\n  onClick,\n}: {\n  submit: (category: Categories) => void;\n  onChange: (text: string) => void;\n  onClick: () => void;\n}) => {\n  const { search } = useSelector(selectState);\n  const [category, setCategory] = React.useState<Categories>(\"Any\");\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  // Added to optimise general api get requests, however quick succession calls to JokesAPI seem fine if this throttle wasn't present.\n  const throttled = useMemo(() => {\n    return throttle(100, handleChange);\n  }, [handleChange]);\n\n  return (\n    <Form>\n      <CategorySelector\n        categories={categories}\n        value={category}\n        onChange={(category) => {\n          submit(category);\n          setCategory(category);\n        }}\n      />\n      <Row>\n        <label style={{ fontSize: \"13px\" }}>Keyword(s)</label>\n        <TextInput type=\"text\" value={search} onChange={(e) => throttled(e)} />\n      </Row>\n      <Button\n        onClick={(e) => {\n          e.preventDefault();\n          setCategory(\"Any\");\n          onClick();\n        }}\n      >\n        Clear\n      </Button>\n    </Form>\n  );\n};\n\nconst selectState = ({ state }: { state: AppState }) => state;\n","import * as React from \"react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { categories, Categories } from \"./appSlice\";\nimport { CategorySelector } from \"./CategorySelector\";\nimport { debounce } from \"throttle-debounce\";\nimport { PostSingleJoke, PostTwoPartJoke } from \"./API\";\n\nconst Form = styled.form`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SelectorField = styled.select`\n  width: 70%;\n  height: 40px;\n  font-family: \"Nunito\", sans-serif;\n  border: 1px solid lightgrey;\n  border-radius: 0.25rem;\n  transition: 0.4s;\n  margin: 1rem 0;\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n  }\n`;\n\nconst TextInput = styled.input`\n  height: 35px;\n  width: 68%;\n  font-family: \"Nunito\", sans-serif;\n  border: 1px solid lightgrey;\n  border-radius: 0.25rem;\n  transition: 0.4s;\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n  }\n  :focus {\n    outline: none;\n  }\n`;\n\nconst Button = styled.button`\n  font-size: 1rem;\n  font-family: \"Nunito\", sans-serif;\n  border: none;\n  border-radius: 0.5rem;\n  background: #1757a0;\n  width: 6rem;\n  height: 2rem;\n  text-decoration: none;\n  padding: 0.25rem;\n  color: white;\n  transition: 0.3s;\n  align-self: flex-end;\n  letter-spacing: 1px;\n  margin-top: 1rem;\n  :hover {\n    background: #114177;\n  }\n`;\n\nconst SetupInput = styled.input`\n  height: 35px;\n  width: 68%;\n  font-family: \"Nunito\", sans-serif;\n  border: 1px solid lightgrey;\n  border-radius: 0.25rem;\n  transition: 0.4s;\n  margin-bottom: 1rem;\n  :hover {\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n  }\n  :focus {\n    outline: none;\n  }\n`;\n\nexport type SingleJokeSubmitProps = {\n  jokeType: \"single\";\n  category: Categories;\n  joke: string;\n};\n\nexport type TwoPartJokeSubmitProps = {\n  jokeType: \"twopart\";\n  category: Categories;\n  setup: string;\n  delivery: string;\n};\n\nexport const NewJokeForm = ({\n  submitJoke,\n}: {\n  submitJoke: (newJoke: PostSingleJoke | PostTwoPartJoke) => void;\n}) => {\n  // local state\n  const [jokeType, setJokeType] = useState<\"single\" | \"twopart\">(\"single\");\n  const [joke, setJoke] = useState<string>(\"\");\n  const [category, setCategory] = useState<Categories>(\"Any\");\n  const [setup, setSetup] = useState<string>(\"\");\n  const [delivery, setDelivery] = useState<string>(\"\");\n\n  const onSubmit = useCallback(() => {\n    // basic validation stops category \"Any\" being entered\n    if (category === \"Any\") {\n      alert(\"Please choose a category\");\n      return null;\n    }\n    // formatting the inputted values with the hard coded ones\n    if (jokeType === \"single\") {\n      submitJoke({\n        formatVersion: 3,\n        category: category,\n        type: jokeType,\n        joke: joke,\n        flags: {\n          nsfw: false,\n          religious: false,\n          political: false,\n          racist: false,\n          sexist: false,\n          explicit: false,\n        },\n        lang: \"en\",\n        safe: true,\n      });\n    } else if (jokeType === \"twopart\") {\n      submitJoke({\n        formatVersion: 3,\n        category: category,\n        type: jokeType,\n        setup: setup,\n        delivery: delivery,\n        flags: {\n          nsfw: false,\n          religious: false,\n          political: false,\n          racist: false,\n          sexist: false,\n          explicit: false,\n        },\n        lang: \"en\",\n        safe: true,\n      });\n    }\n  }, [category, delivery, joke, jokeType, setup, submitJoke]);\n\n  // optimising to prevent spamming of the submit button\n  const debounced = useMemo(() => debounce(1000, onSubmit), [onSubmit]);\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n        debounced();\n      }}\n      data-testid=\"newJokeForm\"\n    >\n      <div style={{ marginBottom: \"1rem\" }}>Submit your own joke!</div>\n      <Row>\n        <CategorySelector\n          categories={categories}\n          value={category}\n          onChange={(category) => {\n            setCategory(category);\n          }}\n        />\n      </Row>\n      <Row>\n        <label style={{ fontSize: \"13px\" }}>Joke Type</label>\n        <SelectorField\n          onChange={(e) => setJokeType(e.target.value as any)}\n          required\n        >\n          <option value=\"single\">Single</option>\n          <option value=\"twopart\">Two Part</option>\n        </SelectorField>\n      </Row>\n      {jokeType === \"single\" ? (\n        <div>\n          <Row>\n            <label style={{ fontSize: \"13px\" }}>Joke</label>\n            <TextInput\n              type=\"text\"\n              value={joke}\n              onChange={(e) => {\n                setJoke(e.target.value);\n              }}\n              data-testid={\"jokeTextField\"}\n              required\n            />\n          </Row>\n        </div>\n      ) : (\n        <div>\n          <Row>\n            <label style={{ fontSize: \"13px\" }}>Setup</label>\n            <SetupInput\n              type=\"text\"\n              value={setup}\n              onChange={(e) => {\n                setSetup(e.target.value);\n              }}\n              required\n            />\n          </Row>\n          <Row>\n            <label style={{ fontSize: \"13px\" }}>Delivery</label>\n            <SetupInput\n              type=\"text\"\n              value={delivery}\n              onChange={(e) => {\n                setDelivery(e.target.value);\n              }}\n              required\n            />\n          </Row>\n        </div>\n      )}\n      <Button type=\"submit\" data-testid={\"jokeSubmitButton\"}>\n        Submit\n      </Button>\n    </Form>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getInfo,\n  getJokes,\n  postJoke,\n  PostSingleJoke,\n  PostTwoPartJoke,\n} from \"./API\";\nimport {\n  AppState,\n  Categories,\n  categorySubmitted,\n  clearButtonClicked,\n  dataFetched,\n  infoDataFetched,\n  jokePosted,\n  searchTextUpdated,\n} from \"./appSlice\";\nimport { JokeList } from \"./JokeList\";\nimport styled from \"styled-components\";\nimport { SearchForm } from \"./SearchForm\";\nimport { NewJokeForm } from \"./NewJokeForm\";\n\ndocument.title = \"Jokes Demo\";\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  background: #e9e9e9;\n  @media only screen and (max-device-width: 768px) {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n  }\n`;\n\nconst JokeSearchContainer = styled.div`\n  position: fixed;\n  background: white;\n  top: 3.5%;\n  left: 2.5%;\n  width: 18%;\n  height: 30%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  border: 1px solid lightgrey;\n  border-radius: 0.5rem;\n  padding: 20px;\n  @media only screen and (max-device-width: 768px) {\n    width: 80%;\n    top: 0;\n    left: 0;\n    position: relative;\n    margin: 1rem 0;\n    height: 300px;\n  }\n`;\n\nconst SubmitJokeContainer = styled.div`\n  position: fixed;\n  background: white;\n  top: 40%;\n  left: 2.5%;\n  width: 18%;\n  height: 45%;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid lightgrey;\n  border-radius: 0.5rem;\n  padding: 20px;\n  @media only screen and (max-device-width: 768px) {\n    top: 0;\n    left: 0;\n    width: 80%;\n    position: relative;\n  }\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const state = useSelector(selectState);\n\n  // one call on first render fetches the information\n  useEffect(() => {\n    const getInfoData = async () => {\n      try {\n        const infoData = await getInfo();\n        dispatch(infoDataFetched({ info: infoData }));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getInfoData();\n  }, [dispatch]);\n\n  // fetch from api when category or search is updated and category changes\n  useEffect(() => {\n    const getJokesData = async (search: string, category: Categories) => {\n      try {\n        const jokesData = await getJokes(search, category);\n        dispatch(dataFetched({ data: jokesData }));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getJokesData(state.search, state.category);\n  }, [dispatch, state.search, state.category]);\n\n  // post new joke to api on form submission\n  const postNewJokeToAPI = async (joke: PostSingleJoke | PostTwoPartJoke) => {\n    try {\n      const res = await postJoke(joke);\n      dispatch(jokePosted({ postResponse: res }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // calc sum of safejokes\n  const safeJokesCount = state.info?.jokes.safeJokes.reduce(\n    (accum, item) => accum + item.count,\n    0\n  );\n\n  return (\n    <Container>\n      <JokeSearchContainer>\n        <div style={{ fontSize: \"15px\" }}>\n          There are a total of {state.info?.jokes.totalCount} jokes to browse,\n          however seeing as you are in safe mode you can access {safeJokesCount}\n          .\n        </div>\n        <SearchForm\n          submit={(category) =>\n            dispatch(categorySubmitted({ category: category }))\n          }\n          onChange={(text) => {\n            dispatch(searchTextUpdated({ text: text }));\n          }}\n          onClick={() => {\n            dispatch(clearButtonClicked());\n          }}\n        />\n        <div>\n          Displaying {state.data?.jokes ? state.data?.jokes.length : \"0\"}{\" \"}\n          results\n          {state.search !== \"\" ? <span> for \"{state.search}\"</span> : null} in \"\n          {state.category}\"\n        </div>\n      </JokeSearchContainer>\n      <SubmitJokeContainer>\n        <NewJokeForm\n          submitJoke={(newJoke) => {\n            postNewJokeToAPI(newJoke);\n          }}\n        />\n        <div style={{ marginTop: \"1rem\", fontSize: \"15px\" }}>\n          {state.postJokeResponse?.message}\n        </div>\n      </SubmitJokeContainer>\n\n      {/* Conditionally render the lsit of jokes based on whether the list is being filtered */}\n      {state.data?.jokes ? <JokeList jokes={state.data.jokes} /> : null}\n    </Container>\n  );\n}\n\nconst selectState = ({ state }: { state: AppState }) => state;\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appSlice from \"./appSlice\";\n\nconst store = configureStore({\n  reducer: {\n    state: appSlice,\n  },\n});\n\nexport default store;\n\nexport type AddDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}